buildscript {
	ext {
		springBootVersion = '2.1.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
	}
}

apply plugin: "io.spring.dependency-management"

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'

jar {
    baseName = 'spring-testing'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-web') {
		exclude module: 'spring-boot-starter-tomcat'
	}
	compile("org.springframework.boot:spring-boot-starter-jetty")
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.postgresql:postgresql:42.1.1')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('com.h2database:h2')
	testCompile('io.rest-assured:rest-assured:3.0.3')
	testCompile('com.github.tomakehurst:wiremock:2.6.0')
	testCompile('org.seleniumhq.selenium:selenium-chrome-driver:3.141.59')
	testCompile('org.seleniumhq.selenium:selenium-remote-driver:3.141.59')
	testCompile('org.seleniumhq.selenium:selenium-api:3.141.59')
	testCompile('au.com.dius:pact-jvm-consumer-junit_2.12:3.5.5')
	testCompile('au.com.dius:pact-jvm-provider-spring_2.12:3.5.5')
	testCompile('io.github.bonigarcia:webdrivermanager:3.3.0')
}

sourceSets {
    // So that we can place source code in 'src/integrationTest/java':
    integrationTest {
        java {

            // So that we can compile against the business classes:
            compileClasspath += main.output
            // So that we can compile against the libs used by the business classes:
            compileClasspath += main.compileClasspath

            // So that we can compile against the unit test classes (custom utilities fx):
            compileClasspath += test.output
            // So that we can compile against the libs used by the unit test classes (JUnit, Spring test support, ...):
            compileClasspath += test.compileClasspath

            // So that test- and business classes can be used at runtime:
            runtimeClasspath += test.runtimeClasspath

        }
    }
}

task integrationTest(type: Test) {

    // So that Gradle knows where the integration test classes are:
    testClassesDir = sourceSets.integrationTest.output.classesDirs

    // So that Gradle knows which runtime class path to use:
    classpath = sourceSets.integrationTest.runtimeClasspath

}